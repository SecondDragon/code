function foo() {
  console.log(n)
  var n = 200
  console.log(n)
}

var n = 100
foo()

// 函数时特殊的，在编译时，一旦发现函数，就会在堆中生成对象开辟内存存储函数，称为存储函数空间，对象中包含函数的父级作用域级函数体（执行体、代码块 都对）
// 编译时发现函数定义，并会在堆内存中新建一个函数对象，对象中保存着定义的函数的函数体和 父级作用域
// 会在GO里加入foo属性，指向函数对象的地址，

// 在执行到函数时，会找到GO里的属性foo 根据地址找到函数对象，根据函数的执行体（代码块）创建函数执行上下文
// 函数执行上下文由3部分组成
// 1：在解析函数形成 抽象语法树ast 时，会创建一个VO 称为AO(Activation Object) AO中包括形参、arguments、函数定义、和指向函数对象、定义的变量
// 2：作用域链：由VO (函数中就是AO),和父级VO组成，查找时会一层层的查找
// 3：this绑定的值
// 执行完毕后：执行上下文销毁
// 其生成的AO如果没有任何地方指向他，那么这个AO也会被销毁

// 如上 如果foo又执行了一遍，他会再走一遍执行的过程