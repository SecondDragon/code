// 事件环 为了实现js的异步概念

// js是“单线程” （主线程）的， 我们在写代码的时候 setTimeout  ajax
// 进程：计算机分配任务的最小单位  （不是按照线程分配的）
// 进程里包含多个线程 
// 浏览器是由多个进程组成的

// EventLoop解决的是 js执行时可能会调用异步方法，这些方法是怎样调度执行的

// 1.js执行的时候 会从上到下执行，遇到函数会创建执行上下文放入到执行栈中，执行完毕后会出栈 执行时可能会发生异步事件  - 》 内部会调用浏览器Api

// 2.当我们执行上下文栈都执行完毕后， 等会可能api执行完成或者时间到达， 会被我IE互道一个事件“队列”、消息“队列”  先进先出 

// 3.不停的扫描队列，将队列里的任务拿出来放到上下文栈中执行 
// 事件循环线程是专门干这件事的，检测当前执行栈是否为空，如果为空，从事件队列中取出一个来执行 setTimeout 宏任务

// 4.当代码执行时还会有一些任务 promise为例，微任务，每次执行宏任务的时候 都会单独创建一个微任务“队列” 先进先出

// 5.微任务在执行完毕后，浏览器会检测是否要重新渲染,浏览器有刷新频率 大约16.6ms

// 6.每次循环一次都会执行一个宏任务，并清空对应的微任务队列，每次循环完毕后，都要看是否要渲染，如果需要渲染才渲染

// 宏任务script脚本  界面渲染也是宏任务 setTimeout setInterval postMessage MessageChannel setImmediate也是宏任务  事件 ajax

// 微任务： promise.then mutationObserver 

// 微任务中在执行时再生成微任务，会在本轮直接清空

console.log('abc')  // [s1 ,s2]
setTimeout(() => {
    console.log('abc');
}, 1000);

setTimeout(() => {
    console.log('bcd');
}, 500);